pipeline {
    agent {
        kubernetes {
            label "agent-${UUID.randomUUID().toString()}"
            yamlFile "customer/pipeline/agent.yaml"
        }
    }
    environment {
        GKE_CLUSTER_NAME = 'prod-phase-sonar'
        GKE_PROJECT = 'jenkins-sonar-448116'
        GKE_ZONE = 'us-central1-c'
        DOCKER_REGISTRY = 'us-central1-docker.pkg.dev/jenkins-sonar-448116/docker-registry'
        DOCKER_IMAGE_NAME = 'springboot-app'
        SONARQUBE_URL = 'http://34.121.131.107:9000'
        SONARQUBE_TOKEN = credentials('jenkins-sonar')
    }
    stages {
        stage('Clone Repository') {
            steps {
                checkout scm
            }
        }
        stage('Compile Code') {
            steps {
                container('maven-junit') {
                    script {
                        dir('customer') {
                            sh 'mvn clean install -DskipTests'
                        }
                    }
                }
            }
        }
        stage('Run JUnit Tests') {
            steps {
                container('maven-junit') {
                    script {
                        dir('your-springboot-project') {
                            sh 'mvn test'
                        }
                    }
                }
            }
        }
        stage('Check Code Coverage') {
            steps {
                container('maven-junit') {
                    script {
                        dir('your-springboot-project') {
                            sh 'mvn jacoco:report'
                        }
                    }
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                container('maven-junit') {
                    withSonarQubeEnv('jenkins-sonar') {
                        script {
                            dir('customer') {
                                sh """
                                    mvn clean verify sonar:sonar \
                                    -Dsonar.projectKey=sonar-customer-test \
                                    -Dsonar.projectName="sonar-customer-test" \
                                    -Dsonar.host.url=${SONARQUBE_URL} \
                                    -Dsonar.login=${SONARQUBE_TOKEN}
                                """
                            }
                        }
                    }
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                container('gcloud-docker') {
                    script {
                        sh "docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:v1 ./your-springboot-project"
                    }
                }
            }
        }
        stage('Login and Push Image to Container Registry') {
            steps {
                withCredentials([file(credentialsId: 'gcp-artifact-registry-key', variable: 'GCLOUD_SERVICE_KEY')]) {
                    container('gcloud-docker') {
                        script {
                            sh 'gcloud auth activate-service-account --key-file=$GCLOUD_SERVICE_KEY'
                            sh 'gcloud auth configure-docker us-central1-docker.pkg.dev'
                            sh "docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:v1"
                        }
                    }
                }
            }
        }
        stage('Deploy to GKE') {
            steps {
                container('gcloud-docker') {
                    script {
                        sh "gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --zone ${GKE_ZONE} --project ${GKE_PROJECT}"

                        sh 'kubectl apply -f customer/kubernetes/deployment.yaml'
                        sh 'kubectl apply -f customer/kubernetes/service.yaml'
                    }
                }
            }
        }
    }
}
