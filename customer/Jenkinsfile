pipeline {
    agent {
        kubernetes {
            label "agent-${UUID.randomUUID().toString()}"
            yamlFile "customer/pipeline/agent.yaml"
        }
    }
    environment {
        GKE_CLUSTER_NAME = 'prod-phase-sonar'
        GKE_PROJECT = 'jenkins-sonar-448116'
        GKE_ZONE = 'us-central1-c'
        DOCKER_REGISTRY = 'us-central1-docker.pkg.dev/jenkins-sonar-448116/docker-registry'
        DOCKER_IMAGE_NAME = 'backend-image'
        SONARQUBE_URL = 'http://34.121.131.107:9000'
        SONARQUBE_TOKEN = credentials('jenkins-sonar')
    }
    stages {
        stage('Clone Repository') {
            steps {
                checkout scm
            }
        }
        stage('Maven Build & Test') {
            steps {
                container('maven-container') {
                    script {
                        dir('customer') {
                            sh 'mvn clean install' // Run Maven build and tests
                        }
                    }
                }
            }
        }
        stage('SonarQube Analysis') {
    steps {
        container('maven-container') {  // Use Maven container to build the project
            withSonarQubeEnv('jenkins-sonar') {
                script {
                    // Ensure we're in the correct directory (where pom.xml is located)
                    dir('customer') {
                        // Run Maven build and SonarQube analysis
                        sh """
                            mvn clean install sonar:sonar \
                            -Dsonar.projectKey=trivytest \
                            -Dsonar.projectName=trivytest \
                            -Dsonar.host.url=${SONARQUBE_URL} \
                            -Dsonar.login=${SONARQUBE_TOKEN}
                        """
                    }
                }
            }
        }
    }
}
        stage('Quality Gate') {
            steps {
                container('maven-container') {
                    script {
                        timeout(time: 1, unit: 'MINUTES') {
                           def qualityGate = waitForQualityGate abortPipeline: true
                           echo "Quality Gate result: ${qualityGate.status}"
                        }
                    }
                }
            }
        }
        stage('Authenticate and Push Docker Image') {
            steps {
                withCredentials([file(credentialsId: 'gcp-artifact-registry-key', variable: 'GCLOUD_SERVICE_KEY')]) {
                    container('gcloud-docker') {
                        script {
                            sh 'gcloud auth activate-service-account --key-file=$GCLOUD_SERVICE_KEY'
                            sh 'gcloud auth configure-docker us-central1-docker.pkg.dev'
                            sh "docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:v1 ./customer"
                        }
                    }
                }
            }
        }
       
    stage('Run Trivy Scan') {
            steps {
                container('gcloud-docker') {
                    script {
                        echo "Running Trivy Scan on the Docker image..."

                        // Install curl if missing
                        apt-get install -y curl

                        // Install Trivy
                        sh 'curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b ./bin'

                        // Ensure Trivy is in the PATH
                        sh 'export PATH=$PATH:$(pwd)/bin'

                        // Verify Trivy installation
                        sh '''
                            if ! command -v trivy &> /dev/null; then
                                echo "Trivy could not be found, exiting..."
                                exit 1
                            fi
                        '''

                        // Run the Trivy scan on the built image
                        sh """
                            trivy image --severity HIGH,CRITICAL --format template --template "@custom-html.tpl" \
                            -o trivy-scan-report.html ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:v1
                        """
                    }
                }
            }
            post {
                always {
                    echo "Publishing Trivy Scan Report..."
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: '.',
                        reportFiles: 'trivy-scan-report.html',
                        reportName: 'Trivy Vulnerability Report'
                    ])
                }
            }
        }
         stage('Push Docker Image to Registry') {
            steps {
                withCredentials([file(credentialsId: 'gcp-artifact-registry-key', variable: 'GCLOUD_SERVICE_KEY')]) {
                    container('gcloud-docker') {
                        script {
                            // Push Docker image to the registry after scan
                            sh "docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:v1"
                        }
                    }
                }
            }
        }
        stage('Deploy to GKE') {
            steps {
                container('gcloud-docker') {
                    script {
                        sh "gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --zone ${GKE_ZONE} --project ${GKE_PROJECT}"
                        sh 'kubectl apply -f customer/kubernetes/deployment.yaml'
                        sh 'kubectl apply -f customer/kubernetes/service.yaml'
                    }
                }
            }
        }
    }
}
