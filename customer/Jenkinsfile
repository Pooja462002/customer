pipeline {
    options {
        buildDiscarder(
            logRotator(
                numToKeepStr: '10',
                daysToKeepStr: '7',
                artifactDaysToKeepStr: '7',
                artifactNumToKeepStr: '10'
            )
        )
    }
    
    agent {
        kubernetes {
            label "agent-${UUID.randomUUID().toString()}"
            yamlFile "customer/pipeline/agent.yaml"
        }
    }

    environment {
        GKE_CLUSTER_NAME = 'prod-phase-sonar'
        GKE_PROJECT = 'jenkins-sonar-448116'
        GKE_ZONE = 'us-central1-c'
        DOCKER_REGISTRY = 'us-central1-docker.pkg.dev/jenkins-sonar-448116/docker-registry'
        DOCKER_IMAGE_NAME = 'backend-image'
        SONARQUBE_URL = 'http://34.121.131.107:9000'
        SONARQUBE_TOKEN = credentials('jenkins-sonar')
    }

    stages {
        stage('Clone Repository') {
            steps {
                checkout scm
            }
        }

        stage('Build & Test with Maven') {
            steps {
                container('maven-container') {
                    dir('customer') {
                        sh 'mvn clean install'
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'customer/target/site/jacoco/**', fingerprint: true
                    publishHTML(target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'customer/target/site/jacoco',
                        reportFiles: 'index.html',
                        reportName: 'JaCoCo Code Coverage Report'
                    ])
                }
            }
        }

        // stage('Run BDD Tests') {
        //     steps {
        //         container('node-container') {
        //             dir('customer') {
        //                 sh 'mvn clean verify'
        //             }
        //         }
        //     }
        //     post {
        //         always {
        //             archiveArtifacts artifacts: 'customer/target/site/serenity/**', fingerprint: true
        //             publishHTML(target: [
        //                 allowMissing: false,
        //                 alwaysLinkToLastBuild: true,
        //                 keepAll: true,
        //                 reportDir: 'customer/target/site/serenity',
        //                 reportFiles: 'index.html',
        //                 reportName: 'BDD Test Report',
        //                 reportTitles: 'BDD Cucumber Test Results'
        //             ])
        //         }
        //     }
        // }

        stage('SonarQube Analysis') {
            steps {
                container('maven-container') {
                    withSonarQubeEnv('jenkins-sonar') {
                        dir('customer') {
                            sh """
                                mvn clean install sonar:sonar \
                                -Dsonar.projectKey=trivytest \
                                -Dsonar.projectName=trivytest \
                                -Dsonar.host.url=${SONARQUBE_URL} \
                                -Dsonar.login=${SONARQUBE_TOKEN}
                            """
                        }
                    }
                }
            }
        }

        // stage('Quality Gate Check') {
        //     steps {
        //         container('maven-container') {
        //             script {
        //                 timeout(time: 1, unit: 'MINUTES') {
        //                     def qualityGate = waitForQualityGate abortPipeline: true
        //                     echo "Quality Gate result: ${qualityGate.status}"
        //                 }
        //             }
        //         }
        //     }
        // }

        stage('Authenticate & Build Docker Image') {
            steps {
             container('gcloud-docker') {
                        script {
                            sh "docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:v1 ./customer"
                        }
                    }
            }
        }

        stage('Run Trivy Security Scan') {
            steps {
                container('gcloud-docker') {
                    script {
                        sh '''
                            set -e
                            apt-get update && apt-get install -y curl
                            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b ./bin
                            export PATH=$PATH:$(pwd)/bin
                            mkdir -p trivy-reports
                            curl -O https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl
                            mv html.tpl trivy-reports/custom-html.tpl
                            trivy image --severity LOW,MEDIUM,HIGH,CRITICAL --ignore-unfixed --vuln-type os,library --no-progress \
                            --format template --template "@trivy-reports/custom-html.tpl" -o trivy-reports/trivy-scan-report.html ${FULL_IMAGE_PATH}
                        '''
                    }
                }
            }
            post {
                always {
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'trivy-reports',
                        reportFiles: 'trivy-scan-report.html',
                        reportName: 'Trivy Vulnerability Report'
                    ])
                }
            }
        }

        stage('Authenticate & Push Docker Image to Registry') {
           steps {
                withCredentials([file(credentialsId: 'gcp-artifact-registry-key', variable: 'GCLOUD_SERVICE_KEY')]) {
                    container('gcloud-docker') {
                        script {
                            sh 'gcloud auth activate-service-account --key-file=$GCLOUD_SERVICE_KEY'
                            sh 'gcloud auth configure-docker us-central1-docker.pkg.dev'
                            sh "docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_NAME}:v1"
                        }
                    }
                }
            }
        }
        stage('Deploy to GKE') {
                steps {
                    container('gcloud-docker') {
                        script {
                            sh "gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --zone ${GKE_ZONE} --project ${GKE_PROJECT}"
                            sh '''
                                sed -i "s|__IMAGE_PATH__|${FULL_IMAGE_PATH}|" customer/kubernetes/deployment.yaml
                            '''
                            sh 'kubectl apply -f customer/kubernetes/deployment.yaml'
                            sh 'kubectl apply -f customer/kubernetes/service.yaml'
                       }
                  }
            }
      }

    post {
        cleanup {
            container('gcloud-docker') {
                script {
                    cleanWs(cleanWhenNotBuilt: false, deleteDirs: true, disableDeferredWipeout: true, notFailBuild: true, patterns: [[pattern: '.*', type: 'INCLUDE']])
                    sh 'docker logout || true'
                    echo 'Cleaning up workspace...'
                    sh "rm -rf ${env.WORKSPACE}/*"
                }
            }
        }
    }
}
}
